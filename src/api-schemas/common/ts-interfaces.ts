/**
 * Schema duplicated from API (/home/maubut/projects/mechmate/backend/mechmate-api/src/api-schemas/common/ts-interfaces.ts)
 * Last updated: 2025-05-01T13:25:38.993Z
 * Update this file when API schema changes
 */

// This file was auto-generated by prisma-generator-typescript-interfaces

export type ApiKeyScope = "APPOINTMENT_CREATE" | "APPOINTMENT_READ" | "APPOINTMENT_UPDATE" | "APPOINTMENT_DELETE" | "CUSTOMER_CREATE" | "CUSTOMER_READ" | "WORKSHEET_READ" | "WORKSHEET_CREATE" | "INVOICE_READ" | "SDK_BASIC" | "SDK_FULL" | "WEBHOOK_RECEIVE";

export type BlockType = "PAGE" | "PARAGRAPH" | "HEADING_1" | "HEADING_2" | "HEADING_3" | "TODO" | "BULLETED_LIST" | "NUMBERED_LIST" | "TOGGLE" | "TABLE" | "QUOTE" | "DIVIDER" | "CALLOUT" | "CODE" | "IMAGE" | "FILE";

export type TextFormat = "BOLD" | "ITALIC" | "UNDERLINE" | "STRIKETHROUGH" | "CODE" | "COLOR" | "LINK";

export type SequenceType = "INVOICE" | "WORKORDER";

export type PermissionFlags = "GUEST" | "EMPLOYEE" | "ADMINISTRATOR" | "FULL_ADMIN" | "CLIENT" | "USER";

export type ContentType = "DESCRIPTION" | "NOTE" | "COMMENT";

export type ContentFormat = "PLAIN" | "MARKDOWN" | "HTML";

export type MediaType = "IMAGE" | "VIDEO" | "AUDIO" | "DOCUMENT";

export type EntityType = "ENTRY" | "WORKORDER" | "MECH" | "USER" | "CUSTOMER" | "INVOICE";

export type EventType = "APPOINTMENT" | "TODO" | "REMINDER" | "DEADLINE" | "HOLIDAY" | "MILESTONE";

export type DataSource = "SYSTEM" | "USER";

export type FieldPurpose = "GENERAL" | "MILEAGE" | "ENGINE_HOURS" | "RUNTIME" | "REGISTRATION" | "SERIAL_NUMBER" | "MAKE_MODEL_YEAR";

export type FeatureType = "SETUP" | "ONBOARDING" | "HIGHLIGHT";

export type AddressType = "BILLING" | "SHIPPING";

export type Rate = "FLAT" | "STANDARD";

export type STATUS_GROUP = "TODO" | "IN_PROGRESS" | "DONE";

export type EntryType = "PRODUCT" | "SERVICE" | "UNCLASSIFIED";

export type TokenType = "VERIFICATION" | "PASSWORD_RESET" | "INVITATION" | "REFRESH_TOKEN" | "BLACKLISTED";

export type InvoiceStatus = "DRAFT" | "READY" | "SENT" | "PAID" | "CANCELED" | "OVERDUE" | "VOID";

export interface ApiKey {
  id: number;
  uuid: string;
  key: string;
  accountId: number;
  account?: Account;
  name: string;
  description: string | null;
  scopes?: ApiKeyScopeAssignment[];
  usage?: ApiKeyUsage[];
  createdAt: Date;
  updatedAt: Date;
  expiresAt: Date | null;
  isActive: boolean;
  lastUsedAt: Date | null;
  allowedOrigins: string | null;
  allowedIps: string | null;
}

export interface ApiKeyUsage {
  id: number;
  apiKeyId: number;
  apiKey?: ApiKey;
  endpoint: string;
  statusCode: number;
  method: string;
  usedAt: Date;
}

export interface ApiKeyScopeAssignment {
  id: number;
  apiKeyId: number;
  scope: ApiKeyScope;
  apiKey?: ApiKey;
}

export interface Sequence {
  id: number;
  name: SequenceType;
  currentValue: number;
  metadata: JsonValue | null;
  accountId: number;
  account?: Account;
  createdAt: Date;
  updatedAt: Date;
}

export interface TextFormatting {
  id: number;
  format: TextFormat;
  start: number;
  end: number;
  value: string | null;
  contentId: number;
  content?: Content;
}

export interface Content {
  id: number;
  uuid: string;
  type: BlockType;
  text: string | null;
  position: number | null;
  formatting?: TextFormatting[];
  createdAt: Date;
  updatedAt: Date;
  accountId: number;
  account?: Account;
  entityType: EntityType;
  entityId: number;
}

export interface User {
  id: number;
  uuid: string;
  email: string | null;
  username: string;
  password: Uint8Array | null;
  profileUrl: string | null;
  fullname: string | null;
  preferences: JsonValue | null;
  permissionFlags: PermissionFlags;
  createdAt: Date;
  updatedAt: Date;
  deletedAt: Date | null;
  verified: boolean;
  accountId: number;
  timelogs?: TimeLog[];
  token?: Token[];
  account?: Account;
  packages?: UsersOnPackages[];
  worksheets?: Worksheet[];
  features?: Feature[];
  eventsCreated?: CalendarEvent[];
}

export interface CalendarEvent {
  id: number;
  uuid: string;
  accountId: number;
  createdById: number | null;
  eventType: EventType;
  title: string | null;
  description: string | null;
  startDate: Date;
  endDate: Date | null;
  isAllDay: boolean;
  entityType: EntityType | null;
  entityId: number | null;
  reminderDate: Date | null;
  recurrence: JsonValue | null;
  metadata: JsonValue | null;
  createdAt: Date;
  updatedAt: Date;
  account?: Account;
  createdBy?: User | null;
}

export interface Token {
  id: number;
  userId: number;
  token: string;
  type: TokenType;
  deviceId: string | null;
  deviceInfo: JsonValue | null;
  lastUsed: Date;
  expiresAt: Date;
  createdAt: Date;
  user?: User;
}

export interface Customer {
  id: number;
  uuid: string;
  accountId: number;
  email: string | null;
  mobile: string;
  createdAt: Date;
  updatedAt: Date;
  fullname: string;
  addresses?: AddressesOnCustomers[];
  account?: Account;
  invoices?: Invoice[];
  mechs?: Mech[];
}

export interface Address {
  id: number;
  street_number: string | null;
  address_line_1: string | null;
  address_line_2: string | null;
  city: string | null;
  region: string | null;
  postcode: string | null;
  country: string | null;
  createdAt: Date;
  updatedAt: Date;
  name: string | null;
  type: AddressType;
  customers?: AddressesOnCustomers[];
  Brand?: Brand[];
  invoiceAddress?: Invoice[];
}

export interface Make {
  id: number;
  name: string;
  makeId: number | null;
  models?: Model[];
  source: DataSource;
  accountId: number | null;
  account?: Account | null;
  MakeExclusion?: MakeExclusion[];
}

export interface Model {
  id: number;
  name: string;
  makeId: number;
  modelId: number | null;
  mechs?: Mech[];
  source: DataSource;
  make?: Make;
}

export interface MakeExclusion {
  id: number;
  makeId: number;
  accountId: number;
  createAt: Date;
  account?: Account;
  make?: Make;
}

export interface Mech {
  id: number;
  uuid: string;
  equipmentTypeId: number;
  fieldValues?: FieldValue[];
  serialNumber: string | null;
  modelYear: number | null;
  customerId: number;
  accountId: number;
  modelId: number | null;
  createdAt: Date;
  updatedAt: Date;
  deletedAt: Date | null;
  metricId: number | null;
  customer?: Customer;
  metric?: MechMetric | null;
  model?: Model | null;
  worksheets?: Worksheet[];
  MetricsOnInvoices?: MetricsOnInvoices[];
  type?: EquipmentType;
  account?: Account;
}

export interface AccountsOnPackages {
  accountId: number;
  packageId: number;
  startedAt: Date;
  expireAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
  account?: Account;
  package?: Package;
}

export interface UsersOnPackages {
  userId: number;
  packageId: number;
  startedAt: Date;
  expireAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
  package?: Package;
  user?: User;
}

export interface Package {
  id: number;
  name: string;
  stripeProductId: string | null;
  createdAt: Date;
  updatedAt: Date;
  accounts?: AccountsOnPackages[];
  users?: UsersOnPackages[];
}

export interface Subscription {
  id: number;
  name: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface MechMetric {
  id: number;
  license: string | null;
  unit: string | null;
  mileage_in: number | null;
  mileage_out: number | null;
  engineHours: number | null;
  createdAt: Date;
  updatedAt: Date;
  mech?: Mech[];
  invoices?: MetricsOnInvoices | null;
}

export interface MetricsOnInvoices {
  mechId: number;
  metricId: number;
  invoiceId: number;
  mech?: Mech;
  invoice?: Invoice;
  metrics?: MechMetric;
}

export interface Worksheet {
  id: number;
  uuid: string;
  worksheetId: number;
  mechId: number | null;
  accountId: number;
  statusId: number;
  createdAt: Date;
  updatedAt: Date;
  dueAt: Date | null;
  userId: number | null;
  entries?: EntriesOnWorksheet[];
  account?: Account;
  mech?: Mech | null;
  status?: WorksheetStatus;
  user?: User | null;
}

export interface Account {
  id: number;
  stripeCustomerId: string | null;
  createdAt: Date;
  updatedAt: Date;
  preferences: JsonValue | null;
  packages?: AccountsOnPackages[];
  Brand?: Brand | null;
  customers?: Customer[];
  contents?: Content[];
  entry_status?: EntryStatus[];
  invoices?: Invoice[];
  products?: Product[];
  services?: Service[];
  TaxGroup?: TaxGroup[];
  timelogs?: TimeLog[];
  users?: User[];
  worksheet_status?: WorksheetStatus[];
  worksheets?: Worksheet[];
  mech?: Mech[];
  calendar_events?: CalendarEvent[];
  apiKeys?: ApiKey[];
  makes?: Make[];
  MakeExclusion?: MakeExclusion[];
  Sequence?: Sequence[];
  EquipmentType?: EquipmentType[];
}

export interface Brand {
  id: number;
  email: string | null;
  mobile: string | null;
  logoUrl: string | null;
  accountId: number;
  createdAt: Date;
  updatedAt: Date;
  addressId: number | null;
  uuid: string;
  account?: Account;
  address?: Address | null;
}

export interface Service {
  id: number;
  name: string;
  description: string | null;
  isPreset: boolean;
  parentId: number | null;
  createdAt: Date;
  updatedAt: Date;
  accountId: number;
  entryProductService?: EntryProductService[];
  prices?: PricesOnServices[];
  account?: Account;
  parent?: Service | null;
  children?: Service[];
}

export interface Product {
  id: number;
  name: string;
  description: string | null;
  code: string | null;
  quantity: number | null;
  accountId: number;
  createdAt: Date;
  updatedAt: Date;
  entryProductService?: EntryProductService[];
  prices?: PricesOnProducts[];
  account?: Account;
}

export interface Entry {
  id: number;
  content: string | null;
  description: string | null;
  statusId: number | null;
  value_measured: number | null;
  createdAt: Date;
  updatedAt: Date;
  priceId: number | null;
  invoiceId: number | null;
  type: EntryType;
  name: string | null;
  entryProductService?: EntryProductService | null;
  invoice?: Invoice | null;
  price?: Price | null;
  status?: EntryStatus | null;
  worksheets?: EntriesOnWorksheet | null;
  timelogs?: TimeLog[];
}

export interface EntryProductService {
  id: number;
  entryId: number;
  productId: number | null;
  serviceId: number | null;
  entry?: Entry;
  product?: Product | null;
  service?: Service | null;
}

export interface EntryStatus {
  id: number;
  name: string;
  group: STATUS_GROUP;
  order: number;
  accountId: number;
  entries?: Entry[];
  account?: Account;
}

export interface WorksheetStatus {
  id: number;
  name: string;
  group: STATUS_GROUP;
  order: number;
  accountId: number;
  account?: Account;
  worksheets?: Worksheet[];
}

export interface Invoice {
  id: number;
  uuid: string;
  invoiceId: number;
  addressId: number | null;
  customerId: number;
  createdAt: Date;
  updatedAt: Date;
  accountId: number;
  dueAt: Date | null;
  issuedAt: Date | null;
  status: InvoiceStatus;
  taxGroupId: number | null;
  entries?: Entry[];
  account?: Account;
  address?: Address | null;
  customer?: Customer;
  taxGroup?: TaxGroup | null;
  metrics?: MetricsOnInvoices[];
  transactions?: Transaction[];
}

export interface Price {
  id: number;
  valuePerUnit: Decimal;
  rateType: Rate;
  createdAt: Date;
  updatedAt: Date;
  entries?: Entry[];
  products?: PricesOnProducts[];
  services?: PricesOnServices[];
}

export interface Transaction {
  id: number;
  name: string;
  description: string | null;
  invoiceId: number;
  createdAt: Date;
  updatedAt: Date;
  invoice?: Invoice;
}

export interface PricesOnServices {
  priceId: number;
  serviceId: number;
  price?: Price;
  service?: Service;
}

export interface EntriesOnWorksheet {
  entryId: number;
  worksheetId: number;
  entry?: Entry;
  worksheet?: Worksheet;
}

export interface PricesOnProducts {
  priceId: number;
  productId: number;
  price?: Price;
  product?: Product;
}

export interface AddressesOnCustomers {
  customerId: number;
  addressId: number;
  address?: Address;
  customer?: Customer;
}

export interface TimeLog {
  id: number;
  startTime: Date | null;
  endTime: Date | null;
  duration: number | null;
  notes: string | null;
  userId: number;
  entryId: number | null;
  createdAt: Date;
  updatedAt: Date;
  accountId: number;
  account?: Account;
  entry?: Entry | null;
  user?: User;
}

export interface Tax {
  id: number;
  name: string;
  rate: Decimal;
  description: string | null;
  createdAt: Date;
  updatedAt: Date;
  groupId: number;
  group?: TaxGroup;
}

export interface TaxGroup {
  id: number;
  name: string;
  accountId: number;
  invoices?: Invoice[];
  account?: Account;
  taxes?: Tax[];
}

export interface Feature {
  id: number;
  type: FeatureType;
  attributes: JsonValue | null;
  userId: number;
  user?: User;
  completedAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface EquipmentType {
  id: number;
  name: string;
  accountId: number;
  account?: Account;
  fields?: EquipmentField[];
  mechs?: Mech[];
}

export interface EquipmentField {
  id: number;
  name: string;
  purpose: FieldPurpose;
  required: boolean;
  source: DataSource;
  defaultValue: string | null;
  options: JsonValue | null;
  config: JsonValue | null;
  equipmentTypeId: number;
  equipmentType?: EquipmentType;
  values?: FieldValue[];
  deletedAt: Date | null;
}

export interface FieldValue {
  id: number;
  value: string;
  equipmentFieldId: number;
  mechId: number;
  timestamp: Date;
  field?: EquipmentField;
  mech?: Mech;
}

type JsonValue = string | number | boolean | { [key in string]?: JsonValue } | Array<JsonValue> | null;

type Decimal = { valueOf(): string };
